name: Deploy ai-radio

on:
  push:
    branches:
      - main

env:
  JQ_VERSION: "1.7"
  TF_VERSION: "1.10.5"
  YC_SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.YC_SERVICE_ACCOUNT_KEY_FILE }}
  TF_CLI_CONFIG_FILE: "terraform/config.tfrc"
  AWS_TF_ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
  AWS_TF_SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

  DOCKER_REGISTRY_KEY_ID: ${{ secrets.DOCKER_REGISTRY_KEY_ID }}
  DOCKER_REGISTRY_SA_ID: ${{ secrets.DOCKER_REGISTRY_SA_ID }}
  DOCKER_REGISTRY_PRIVATE_KEY: ${{ secrets.DOCKER_REGISTRY_PRIVATE_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_STATIC_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_STATIC_SECRET_KEY }}
  AWS_SECRET_KEY_ID: ${{ secrets.internal_v4_endpointAWS_STATIC_SECRET_KEY }}
  AWS_DEFAULT_REGION: "ru-central1"
  AI_RADIO_CERT_CHAIN: ${{ secrets.AI_RADIO_CERT_CHAIN }}
  AI_RADIO_CERT_KEY: ${{ secrets.AI_RADIO_CERT_KEY }}

  TF_VAR_organization_id: ${{ secrets.TF_VAR_organization_id }}
  TF_VAR_developers: ${{ secrets.TF_VAR_developers }}
  TF_VAR_operations: ${{ secrets.TF_VAR_operations }}
  TF_VAR_service_account_id: ${{ secrets.TF_VAR_service_account_id }}
  TF_VAR_billing_account_id: ${{ secrets.TF_VAR_billing_account_id }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$AWS_TF_ACCESS_KEY" -backend-config="secret_key=$AWS_TF_SECRET_KEY"

      - name: Terraform Plan
        run: terraform -chdir=terraform/ plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'  # Only apply on main branch
        run: terraform -chdir=terraform/ apply -auto-approve tfplan

  upload-website:
    needs: terraform

    name: "Upload website"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync website files to Yandex Cloud Storage
        run: |
          aws --endpoint-url=https://storage.yandexcloud.net/ s3 sync ./website s3://ai-radio-website --delete

      - name: Sync example music to Yandex Cloud Storage
        run: |
          aws --endpoint-url=https://storage.yandexcloud.net/ s3 sync ./music s3://ai-radio-music

  deploy-docker:
    needs: terraform

    name: "Deploy docker"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Install jq
        uses: dcarbone/install-jq-action@v3
        with:
          version: '${{ env.JQ_VERSION }}'
          force: 'false'

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$AWS_TF_ACCESS_KEY" -backend-config="secret_key=$AWS_TF_SECRET_KEY"

      - name: Configure docker image name
        run: |
          echo "DOCKER_CASTER_IMAGE=$(terraform -chdir=terraform/ output --raw caster_docker_repository)" >> $GITHUB_ENV

      - name: IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-key-id: ${{ secrets.DOCKER_REGISTRY_KEY_ID }}
          yc-service-account-id: ${{ secrets.DOCKER_REGISTRY_SA_ID }}
          yc-private-key: ${{ secrets.DOCKER_REGISTRY_PRIVATE_KEY }}

      - name: Login to yc container registry
        run: |
          echo ${{ steps.issue-iam-token.outputs.token }}  | docker login --username iam --password-stdin cr.yandex

      - name: Build docker caster image
        run: |
          docker build --no-cache \
            --secret "id=AWS_ACCESS_KEY_ID,env=AWS_ACCESS_KEY_ID" \
            --secret "id=AWS_SECRET_KEY_ID,env=AWS_SECRET_KEY_ID" \
            --secret "id=AI_RADIO_CERT_CHAIN,env=AI_RADIO_CERT_CHAIN" \
            --secret "id=AI_RADIO_CERT_KEY,env=AI_RADIO_CERT_KEY" \
            --secret "id=ICECAST_PASSWORD,env=ICECAST_PASSWORD" \
            -t $DOCKER_CASTER_IMAGE:latest ./caster

      - name: Tag docker image
        run: |
          docker tag $DOCKER_CASTER_IMAGE:latest $DOCKER_CASTER_IMAGE:${{ github.sha }}

      - name: Push docker image
        run: |
          docker push $DOCKER_CASTER_IMAGE:latest
          docker push $DOCKER_CASTER_IMAGE:${{ github.sha }}
