name: Deploy ai-radio

on:
  push:
    branches:
      - main

env:
  TF_VERSION: "1.10.5"
  HELM_VERSION: "v3.17.1"
  KUBE_VERSION: "v1.30.1"

  YC_SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.YC_SERVICE_ACCOUNT_KEY_FILE }}
  TF_CLI_CONFIG_FILE: "terraform/config.tfrc"
  AWS_TF_ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
  AWS_TF_SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}

  DOCKER_REGISTRY_KEY_ID: ${{ secrets.DOCKER_REGISTRY_KEY_ID }}
  DOCKER_REGISTRY_SA_ID: ${{ secrets.DOCKER_REGISTRY_SA_ID }}
  DOCKER_REGISTRY_PRIVATE_KEY: ${{ secrets.DOCKER_REGISTRY_PRIVATE_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_STATIC_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_STATIC_SECRET_KEY }}
  AWS_SECRET_KEY_ID: ${{ secrets.AWS_STATIC_SECRET_KEY }}
  AWS_DEFAULT_REGION: "ru-central1"
  ICECAST_PASSWORD: ${{ secrets.ICECAST_PASSWORD }}

  TF_VAR_organization_id: ${{ secrets.TF_VAR_organization_id }}
  TF_VAR_developers: ${{ secrets.TF_VAR_developers }}
  TF_VAR_operations: ${{ secrets.TF_VAR_operations }}
  TF_VAR_service_account_id: ${{ secrets.TF_VAR_service_account_id }}
  TF_VAR_billing_account_id: ${{ secrets.TF_VAR_billing_account_id }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$AWS_TF_ACCESS_KEY" -backend-config="secret_key=$AWS_TF_SECRET_KEY"

      - name: Terraform Plan
        run: terraform -chdir=terraform/ plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'  # Only apply on main branch
        run: terraform -chdir=terraform/ apply -auto-approve tfplan

  upload-website:
    needs: terraform

    name: "Upload website"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync website files to Yandex Cloud Storage
        run: |
          aws --endpoint-url=https://storage.yandexcloud.net/ s3 sync ./website s3://ai-radio-website --delete

      - name: Sync example music to Yandex Cloud Storage
        run: |
          aws --endpoint-url=https://storage.yandexcloud.net/ s3 sync ./music s3://ai-radio-music

  deploy-docker:
    needs: terraform

    name: "Deploy docker"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$AWS_TF_ACCESS_KEY" -backend-config="secret_key=$AWS_TF_SECRET_KEY"

      - name: Configure docker image name
        run: |
          echo "DOCKER_CASTER_IMAGE=$(terraform -chdir=terraform/ output --raw caster_docker_repository)" >> $GITHUB_ENV

      - name: IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-key-id: ${{ secrets.DOCKER_REGISTRY_KEY_ID }}
          yc-service-account-id: ${{ secrets.DOCKER_REGISTRY_SA_ID }}
          yc-private-key: ${{ secrets.DOCKER_REGISTRY_PRIVATE_KEY }}

      - name: Login to yc container registry
        run: |
          echo ${{ steps.issue-iam-token.outputs.token }}  | docker login --username iam --password-stdin cr.yandex

      - name: Build docker caster image
        run: |
          docker build --no-cache \
            --secret "id=AWS_ACCESS_KEY_ID,env=AWS_ACCESS_KEY_ID" \
            --secret "id=AWS_SECRET_KEY_ID,env=AWS_SECRET_KEY_ID" \
            --secret "id=ICECAST_PASSWORD,env=ICECAST_PASSWORD" \
            -t $DOCKER_CASTER_IMAGE:latest ./caster

      - name: Tag docker image
        run: |
          docker tag $DOCKER_CASTER_IMAGE:latest $DOCKER_CASTER_IMAGE:${{ github.sha }}

      - name: Push docker image
        run: |
          docker push $DOCKER_CASTER_IMAGE:latest
          docker push $DOCKER_CASTER_IMAGE:${{ github.sha }}

  deploy-helm:
    needs: deploy-docker
    name: "Deploy helm"
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
        with:
           version: ${{ env.HELM_VERSION }}

      - name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
           version: ${{ env.KUBE_VERSION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SERVICE_ACCOUNT_KEY_FILE }}

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$AWS_TF_ACCESS_KEY" -backend-config="secret_key=$AWS_TF_SECRET_KEY"

      - name: Helm Init
        run: echo ${{ steps.issue-iam-token.outputs.token }}  | helm registry login cr.yandex -u iam --password-stdin

      - name: Helm Lint
        id: helm-lint
        run: helm lint --namespace ai-radio helm/caster/
        continue-on-error: true

      - name: Configure folder and cluster ids
        run: |
          echo "K8S_FOLDER_ID=$(terraform -chdir=terraform/ output --raw ai_radio_network_folder_id)" >> $GITHUB_ENV
          echo "K8S_CLUSTER_ID=$(terraform -chdir=terraform/ output --raw k8s_cluster_id)" >> $GITHUB_ENV

      - name: Helm upgrade
        env:
          K8S_CERT: ${{ secrets.K8S_CERT }}
          K8S_ENDPOINT: ${{ secrets.K8S_MASTER_ENDPOINT }}
          K8S_TOKEN: ${{ secrets.K8S_SA_TOKEN }}
        run: |
          echo "$K8S_CERT" > ca.pem
          kubectl config set-cluster k8s-cluster --certificate-authority=ca.pem --embed-certs --server=$K8S_ENDPOINT --kubeconfig=default.kubeconfig
          kubectl config set-credentials admin-user --token=$K8S_TOKEN --kubeconfig=default.kubeconfig
          kubectl config set-context default --cluster=k8s-cluster --user=admin-user --kubeconfig=default.kubeconfig
          kubectl config use-context default --kubeconfig=default.kubeconfig

          helm pull oci://cr.yandex/yc-marketplace/yandex-cloud/yc-alb-ingress/yc-alb-ingress-controller-chart \
            --version v0.2.19 \
            --untar

          helm upgrade -i --namespace ai-radio \
            --kubeconfig default.kubeconfig \
            --create-namespace \
            --set folderId=$K8S_FOLDER_ID \
            --set clusterId=$K8S_CLUSTER_ID \
            --set enableDefaultHealthChecks=true \
            --set-file saKeySecretKey=~/.config/yandex/key.json \
            yc-alb-ingress-controller ./yc-alb-ingress-controller-chart/
          
          helm upgrade -i --namespace ai-radio \
            --kubeconfig default.kubeconfig \
            --set folderId=$K8S_FOLDER_ID \
            --set clusterId=$K8S_CLUSTER_ID \
            --set-file saKeySecretKey=~/.config/yandex/key.json \
            ai-radio-caster helm/caster/

  deploy-functions:
    needs: terraform

    name: "Deploy functions"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install protoc
        run: |
          sudo apt-get update && sudo apt-get install -y protobuf-compiler
          pip3 install protobuf grpcio grpcio-tools
          protoc --version

      - name: Install python reqs
        run: |
          pip3 install -r apps/python/fetch-news/requirements.txt

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf code
        working-directory: ./apps
        run: |
          ./generate_proto.sh

      - name: Verify generated files
        run: |
          git diff --exit-code
          if [ $? -ne 0 ]; then
            echo "Generated protobuf files are not up to date!"
            exit 1
          fi

      - name: Yes, I like mono repositories
        working-directory: ./apps/go/speech-generator
        run: |
          cp -r ../common .
          go mod edit -replace github.com/valeter/ai-radio/apps/go/common/model=./common/model

      - name: Zip speech-generator
        working-directory: ./apps/go/speech-generator
        run: |
          zip -r speech-generator-${{ github.sha }}.zip ./*

      - name: Upload new version of speech-generator to s3
        working-directory: ./apps/go/speech-generator
        run: |
          aws --endpoint-url=https://storage.yandexcloud.net/ s3 cp ./speech-generator-${{ github.sha }}.zip s3://ai-radio-functions

      - name: Zip fetch-news
        working-directory: ./apps/python/fetch-news
        run: |
          zip -r fetch-news-${{ github.sha }}.zip ./*

      - name: Upload new version of fetch-news to s3
        working-directory: ./apps/python/fetch-news
        run: |
          aws --endpoint-url=https://storage.yandexcloud.net/ s3 cp ./fetch-news-${{ github.sha }}.zip s3://ai-radio-functions

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$AWS_TF_ACCESS_KEY" -backend-config="secret_key=$AWS_TF_SECRET_KEY"

      - name: Terraform Plan
        run: |
          terraform -chdir=terraform/ plan -out=tfplan \
            -var="speech_generator_version=speech-generator-${{ github.sha }}.zip" \
            -var="fetch_news_version=fetch-news-${{ github.sha }}.zip"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'  # Only apply on main branch
        run: terraform -chdir=terraform/ apply -auto-approve tfplan