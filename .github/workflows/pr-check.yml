name: PR checks

on:  
  pull_request:
    branches:
      - main

env:
  TF_VERSION: "1.10.5"
  HELM_VERSION: "v3.17.1"
  KUBE_VERSION: "v1.30.1"

  K8S_CLUSTER_ID: ${{ secrets.K8S_CLUSTER_ID }}
  K8S_CERT: ${{ secrets.K8S_CERT }}
  YC_SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.YC_SERVICE_ACCOUNT_KEY_FILE }}
  TF_CLI_CONFIG_FILE: "config.tfrc"
  ACCESS_KEY: ${{ secrets.YC_ACCESS_KEY }}
  SECRET_KEY: ${{ secrets.YC_SECRET_KEY }}
  ICECAST_PASSWORD: ${{ secrets.ICECAST_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_STATIC_ACCESS_KEY }}
  AWS_SECRET_KEY_ID: ${{ secrets.AWS_STATIC_SECRET_KEY }}

  TF_VAR_organization_id: ${{ secrets.TF_VAR_organization_id }}
  TF_VAR_developers: ${{ secrets.TF_VAR_developers }}
  TF_VAR_operations: ${{ secrets.TF_VAR_operations }}
  TF_VAR_service_account_id: ${{ secrets.TF_VAR_service_account_id }}
  TF_VAR_billing_account_id: ${{ secrets.TF_VAR_billing_account_id }}

jobs:
  terraform:
    name: "Terraform checks"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: "terraform/"

    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Write pr comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  docker-build:
    name: "Docker build"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"

      - name: Configure docker image name
        run: |
          echo "DOCKER_CASTER_IMAGE=$(terraform -chdir=terraform/ output --raw caster_docker_repository)" >> $GITHUB_ENV

      - name: IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-key-id: ${{ secrets.DOCKER_REGISTRY_KEY_ID }}
          yc-service-account-id: ${{ secrets.DOCKER_REGISTRY_SA_ID }}
          yc-private-key: ${{ secrets.DOCKER_REGISTRY_PRIVATE_KEY }}

      - name: Login to yc container registry
        run: |
          echo ${{ steps.issue-iam-token.outputs.token }}  | docker login --username iam --password-stdin cr.yandex

      - name: Build docker caster image
        run: |
          docker build --no-cache \
            --secret "id=AWS_ACCESS_KEY_ID,env=AWS_ACCESS_KEY_ID" \
            --secret "id=AWS_SECRET_KEY_ID,env=AWS_SECRET_KEY_ID" \
            --secret "id=ICECAST_PASSWORD,env=ICECAST_PASSWORD" \
            -t $DOCKER_CASTER_IMAGE:latest ./caster

  helm-verify:
    name: "Helm verify"
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
        with:
           version: ${{ env.HELM_VERSION }}

      - name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
           version: ${{ env.KUBE_VERSION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Yandex Cloud credentials
        run: |
          mkdir -p ~/.config/yandex
          echo '${{ env.YC_SERVICE_ACCOUNT_KEY_FILE }}' > ~/.config/yandex/key.json

      - name: IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with:
          yc-key-id: ${{ secrets.DOCKER_REGISTRY_KEY_ID }}
          yc-service-account-id: ${{ secrets.DOCKER_REGISTRY_SA_ID }}
          yc-private-key: ${{ secrets.DOCKER_REGISTRY_PRIVATE_KEY }}

      - name: Terraform Init
        run: terraform -chdir=terraform/ init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY"

      - name: Configure kubectl
        run: |
          echo -e $K8S_CERT > ca.pem
          
          kubectl config set-cluster k8s-cluster \
            --certificate-authority=ca.pem \
            --embed-certs \
            --server=${{ secrets.K8S_MASTER_ENDPOINT }} \
            --kubeconfig=default.kubeconfig
          
          kubectl config set-credentials admin-user \
            --token=${{ secrets.K8S_SA_TOKEN }} \
            --kubeconfig=default.kubeconfig
          
          kubectl config set-context default \
            --cluster=k8s-cluster \
            --user=ai-radio-caster \
            --kubeconfig=default.kubeconfig
          
          kubectl config use-context default \
            --kubeconfig=default.kubeconfig

      - name: Helm Init
        run: echo ${{ steps.issue-iam-token.outputs.token }}  | helm registry login cr.yandex -u iam --password-stdin

      - name: Helm Lint
        id: helm-lint
        run: helm lint --namespace ai-radio helm/caster/
        continue-on-error: true

      - name: Helm Dry run
        id: helm-dry-run
        run: helm upgrade --dry-run --namespace ai-radio -i ai-radio-caster helm/caster/
        continue-on-error: true

      - name: Write Pr comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          DRY_RUN: "helm\n${{ steps.helm-dry-run.outputs.stdout }}\n${{ steps.helm-dry-run.outputs.stderr }}"
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.body.includes('Helm checks')
            })

            // 2. Prepare format of the comment
            const output = `#### Helm checks
            #### Helm Lint ⚙️\`${{ steps.helm-lint.outcome }}\`
            <details><summary>Show output</summary>

            \`\`\`\n
            ${{ steps.helm-lint.outputs.stdout }}
            ${{ steps.helm-lint.outputs.stderr }}
            \`\`\`

            </details>

            #### Helm upgrade dry run 📖\`${{ steps.helm-dry-run.outcome }}\`

            <details><summary>Show output</summary>

            \`\`\`\n
            ${process.env.DRY_RUN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`helm\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }